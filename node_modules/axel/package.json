{
  "name": "axel",
  "bin": {
    "axel": "index.js"
  },
  "version": "0.0.3",
  "description": "AXEL is a Node.js graphics library for drawing graphics to your console with ASCII characters. AXEL has been designed to help create games, retro graphics and spice up the terminal components of your Node.js applications.",
  "main": "index.js",
  "author": {
    "name": "Alistair MacDonald",
    "email": "al@pwn.io"
  },
  "email": "al@pwn.io",
  "license": "MIT",
  "dependencies": {
    "ansi": "^0.3.0"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/f1lt3r/axel.git"
  },
  "readme": "#AXEL (ASCII-Pixel)\r\n\r\nAXEL is a Node.js graphics library for drawing graphics to your console with ASCII characters. AXEL has been designed to help create games, retro graphics and spice up the terminal components of your Node.js applications.\r\n\r\n> AXEL is short for ASCII-PIXEL. \r\n\r\n##Basic Usage\r\n\r\n```javascript\r\nvar ctx = require('axel');\r\n\r\n// Clear the terminal\r\nctx.clear();\r\n\r\n// Sets the pixel BG color to green\r\nctx.bg(0,255,0);\r\n\r\n// Draws a line into the console\r\nctx.line(1,1,10,10);\r\n```\r\n\r\n##Example Output\r\n\r\nThe screenshot below demonstrates a game I am currently writing where AXEL is being used to control the pixels. You can find the source for the Blitzr game here: https://github.com/F1LT3R/blitzr\r\n\r\n![Blitzr a Space-Invaders type Arcade Game using AXEL](http://i.imgur.com/ZYBBxnq.gif)\r\n\r\n##Commands\r\n\r\n###box(x1, y1, width, height)\r\n\r\n![Box](http://i.imgur.com/QkL5hxO.png)\r\n\r\n```javascript\r\n// Uses AXEL's node module\r\nvar ctx = require('axel');\r\n\r\n// Clear the terminal\r\nctx.clear();\r\n\r\n// Red box\r\nctx.bg(255,0,0);\r\nctx.box(2,2,8,4);\r\n\r\n// Yellow box\r\nctx.bg(255,255,0);\r\nctx.box(12,2,8,4);\r\n\r\n// Green box\r\nctx.bg(0,255,0);\r\nctx.box(2,7,8,4);\r\n\r\n// Blue box\r\nctx.bg(0,0,255);\r\nctx.box(12,7,8,4);\r\n\r\nctx.cursor.restore();\r\n```\r\n\r\n\r\n###line(x1, y1, x2, y2)\r\n\r\n![Line](http://i.imgur.com/mwqd0ab.png)\r\n\r\n```javascript\r\n// Uses AXEL's node module\r\nvar ctx = require('axel');\r\n\r\n// Clear the terminal\r\nctx.clear();\r\n\r\n// Sets the pixel BG color to green\r\nctx.bg(0,255,0);\r\n\r\n// Draws a line into the console\r\nctx.line(1,1,10,10);\r\n\r\nctx.cursor.restore();\r\n```\r\n\r\n\r\n\r\n###point(x, y)\r\n\r\n![Point example](http://i.imgur.com/qaksotU.png)\r\n\r\n```javascript\r\n// Uses AXEL's node module\r\nvar ctx = require('axel');\r\n\r\n// Clear the terminal\r\nctx.clear();\r\n\r\n// Sets the pixel BG color to orange\r\nctx.bg(0,128,255);\r\n\r\n// Draw 100 random blue dots on the console\r\nfor (var i=0; i< 100; i+=1) {\r\n  ctx.point(\r\n    Math.random()*ctx.cols, \r\n    Math.random()*ctx.rows\r\n  );\r\n}\r\n\r\nctx.cursor.restore();\r\n```\r\n\r\n\r\n###fg(red, green, blue)\r\n\r\nChanges the foreground color of the ASCII-Pixel\r\n\r\n###bg(red, green, blue)\r\n\r\nChanges the background color of the ASCII-Pixel\r\n\r\n\r\n\r\n###text(x, y, string)\r\n\r\n![Text](http://i.imgur.com/xo3xXxA.png)\r\n\r\n```javascript\r\n// Uses AXEL's node module\r\nvar ctx = require('axel');\r\n\r\n// Clear the terminal/screen/console\r\nctx.clear();\r\n\r\n// Background to red, foreground to white\r\nctx.bg(255,0,0);\r\nctx.fg(255,255,255);\r\nctx.text(5,1,\" WHITE ON RED! \");\r\n\r\n// Background to yellow, foreground to black\r\nctx.bg(255,255,0);\r\nctx.fg(0,0,0);\r\nctx.text(10,2,\" BLACK ON YELLOW! \");\r\n\r\n\r\n// Position the cursor at the end of the console\r\n// so as not to draw over the bottom of the circle\r\nctx.cursor.restore();\r\n```\r\n\r\n\r\n###scrub(x1, y1, width, height)\r\n\r\nRemoves pixels from the console. Similar to HTML5 Canvas 2D context.clear().\r\n\r\n![Scrub example](http://i.imgur.com/G1iL3G3.png)\r\n\r\n```javascript\r\nvar ctx = require('axel');\r\n\r\n// Clear the terminal\r\nctx.clear();\r\n\r\n// Green box\r\nctx.bg(128,255,0);\r\nctx.box(2,2,30,15);\r\n\r\n// Scub some holes in the green box\r\nctx.scrub(4,3,8,5);\r\nctx.scrub(13,3,8,7);\r\nctx.scrub(22,3,8,13);\r\n\r\nctx.cursor.restore();\r\n```\r\n\r\n\r\n###brush = '[character]'\r\n\r\nChanges the character that gets drawn into the pixel location. This can be used to create texture effects, and ASCII-Art.\r\n\r\n![Character brush example](http://i.imgur.com/XPoavKl.png)\r\n\r\n```javascript\r\nvar ctx = require('axel');\r\n\r\n// Clear the terminal/screen/console\r\nctx.clear();\r\n\r\n// \"Brush\" refers to a \"character-brush\"\r\n// Every time a pixel is drawn in a line for example,\r\n// the foreground color and the brush can be used to \r\n// add texture/detail to the pixel.\r\n\r\nvar brushes = \" ░▒▓█\";\r\n\r\nfunction nextBrush(n){\r\n  return brushes[parseInt(n%brushes.length)];\r\n}\r\n\r\n// Draw some lines which step through the brush characters\r\nfor (var y =1; y< ctx.rows; y+=1) {\r\n  \r\n  ctx.brush = nextBrush(y);\r\n  \r\n  // Each line is now draw with the specified \r\n  // character in each pixel\r\n  ctx.line(1, y, ctx.cols, y);\r\n}\r\n\r\n// Draw some circles which step through some brush characters\r\n\r\nvar circSize = Math.sqrt(ctx.rows + ctx.cols)*2\r\n  , centerX = ctx.cols / 2\r\n  , centerY = ctx.rows / 2\r\n  ;\r\n\r\nfor (var m =1; m< circSize; m+=1) {\r\n  ctx.brush = nextBrush(m);  \r\n  ctx.circ(centerX, centerY, m);\r\n}\r\n\r\nctx.cursor.restore();\r\n```\r\n\r\n\r\n\r\n\r\n\r\n###clear()\r\n\r\nClears the whole console. Similar to writing \"clear\" in your terminal.\r\n\r\n\r\n\r\n\r\n##Demos\r\n\r\nThe demonstrations are stored in the ./demos directory. To begin a demonstration...\r\n\r\n```bash\r\ncd demos\r\nnode [demo-name.js] \r\n```\r\n\r\n\r\n",
  "readmeFilename": "README.md",
  "gitHead": "79c91ae2cd874138f14407f92127db6140af3d43",
  "bugs": {
    "url": "https://github.com/f1lt3r/axel/issues"
  },
  "homepage": "https://github.com/f1lt3r/axel#readme",
  "_id": "axel@0.0.3",
  "scripts": {},
  "_shasum": "1a96aacc91a958995eea8fc6a3288a28642b66d1",
  "_from": "axel",
  "_resolved": "file:axel"
}
